# Task ID: 10
# Title: Implement Share Functionality
# Status: pending
# Dependencies: 6
# Priority: low
# Description: Add the ability for users to share their generated Korean name results via social media, copy to clipboard, or download as an image.
# Details:
1. Create a ShareButton component in components/share-button.tsx:
```tsx
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Share, Copy, Check, Download } from 'lucide-react';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { KoreanNameResult } from '@/lib/gemini';
import { useToast } from '@/components/ui/use-toast';
import html2canvas from 'html2canvas';

interface ShareButtonProps {
  result: KoreanNameResult;
  resultCardRef: React.RefObject<HTMLDivElement>;
}

export function ShareButton({ result, resultCardRef }: ShareButtonProps) {
  const [copied, setCopied] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const { toast } = useToast();

  const shareText = `My Korean name is ${result.korean_name}\n${result.poetic_interpretation}\nGenerated by Korean Name Changer`;

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(shareText);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to copy to clipboard',
        variant: 'destructive',
      });
    }
  };

  const handleDownloadImage = async () => {
    if (!resultCardRef.current) return;
    
    setIsDownloading(true);
    try {
      const canvas = await html2canvas(resultCardRef.current, {
        backgroundColor: '#ffffff',
        scale: 2, // Higher quality
      });
      
      const image = canvas.toDataURL('image/png');
      const link = document.createElement('a');
      link.href = image;
      link.download = `korean-name-${result.original_name.replace(/\s+/g, '-').toLowerCase()}.png`;
      link.click();
      
      toast({
        title: 'Success',
        description: 'Image downloaded successfully',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to download image',
        variant: 'destructive',
      });
    } finally {
      setIsDownloading(false);
    }
  };

  const handleShare = async () => {
    if (!navigator.share) {
      toast({
        title: 'Error',
        description: 'Web Share API is not supported in your browser',
        variant: 'destructive',
      });
      return;
    }
    
    try {
      await navigator.share({
        title: 'My Korean Name',
        text: shareText,
        url: window.location.href,
      });
    } catch (error) {
      if (error instanceof Error && error.name !== 'AbortError') {
        toast({
          title: 'Error',
          description: 'Failed to share',
          variant: 'destructive',
        });
      }
    }
  };

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="flex items-center gap-2">
          <Share className="h-4 w-4" />
          <span>Share</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-56" align="end">
        <div className="grid gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="justify-start" 
            onClick={handleCopy}
          >
            {copied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
            {copied ? 'Copied!' : 'Copy to clipboard'}
          </Button>
          
          <Button 
            variant="outline" 
            size="sm" 
            className="justify-start" 
            onClick={handleDownloadImage}
            disabled={isDownloading}
          >
            <Download className="h-4 w-4 mr-2" />
            {isDownloading ? 'Downloading...' : 'Download as image'}
          </Button>
          
          {navigator.share && (
            <Button 
              variant="outline" 
              size="sm" 
              className="justify-start" 
              onClick={handleShare}
            >
              <Share className="h-4 w-4 mr-2" />
              Share
            </Button>
          )}
        </div>
      </PopoverContent>
    </Popover>
  );
}
```

2. Install html2canvas for image generation:
```bash
npm install html2canvas
```

3. Update the ResultCard component to include a ref and share button:
```tsx
// Add to imports
import { forwardRef } from 'react';
import { ShareButton } from '@/components/share-button';

// Update component definition
export const ResultCard = forwardRef<HTMLDivElement, ResultCardProps>(({ result }, ref) => {
  return (
    <Card className="w-full max-w-2xl mx-auto" ref={ref}>
      <CardHeader className="flex flex-row items-start justify-between">
        <div>
          <CardTitle className="text-center">{result.korean_name}</CardTitle>
          <CardDescription className="text-center">Korean name for {result.original_name}</CardDescription>
        </div>
        <ShareButton result={result} resultCardRef={ref as React.RefObject<HTMLDivElement>} />
      </CardHeader>
      {/* Rest of the component remains the same */}
    </Card>
  );
});
ResultCard.displayName = 'ResultCard';
```

4. Update the main page to use the ref:
```tsx
// Add to imports
import { useRef } from 'react';

// Inside the component
const resultCardRef = useRef<HTMLDivElement>(null);

// Update the JSX
<ResultCard result={result} ref={resultCardRef} />
```

# Test Strategy:
1. Test copying to clipboard functionality
2. Verify image download works correctly and produces a high-quality image
3. Test Web Share API on supported devices/browsers
4. Verify proper error handling when sharing features are not supported
5. Test with different result content (long names, special characters)
6. Check that toast notifications appear correctly for success/error states
7. Verify the share popover displays and positions correctly
8. Test on different devices to ensure cross-platform compatibility
