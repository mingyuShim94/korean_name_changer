# Task ID: 11
# Title: Implement Fallback/Mock Data for Development
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Create a fallback mechanism with mock data for development and testing purposes, to avoid API calls during development and handle API failures gracefully.
# Details:
1. Create a mock data file in lib/mock-data.ts:
```typescript
import { KoreanNameResult } from './gemini';

export const MOCK_RESULTS: Record<string, KoreanNameResult> = {
  'sophia loren': {
    original_name: 'Sophia Loren',
    korean_name: '이예지 (李藝智, Lee Ye-ji)',
    connection_explanation: '\'소피아\'라는 이름은 그리스어로 \'지혜\'를 의미하며, 깊은 이해와 통찰력을 나타냅니다. 이는 \'예술적 지혜\' 또는 \'교양 있는 지성\'을 의미하는 한국 이름 \'예지(藝智)\'에 영감을 주었습니다. 성씨 \'로렌\'은 시대를 초월하는 우아함과 고전적인 아름다움을 연상시키는데, 이는 \'자두나무\'를 원래 의미하며 우아한 전통과 회복력을 전달하는 한국의 흔하고 역사적으로 중요한 성씨 \'이(李)\'와 유사합니다.',
    hanja_breakdown: [
      {
        character: '李',
        meaning: '자두나무를 참조하며, 굳건함과 고전적인 우아함을 상징하는 널리 퍼진 전통적인 한국 성씨입니다.'
      },
      {
        character: '藝',
        meaning: '예술, 기술, 재능, 교양 — 소피아 로렌의 거장다운 예술성과 세련된 존재감을 반영합니다.'
      },
      {
        character: '智',
        meaning: '지혜, 지성 — 원래 이름 \'소피아\'의 의미와 직접적으로 일치합니다.'
      }
    ],
    poetic_interpretation: '\'이예지\'는 깊은 통찰력과 예술적 우아함을 모두 갖춘 지혜롭고 교양 있는 정신의 이미지를 구현합니다. 이는 마치 조용하고 지적인 아름다움으로 피어나는 자두나무처럼, 심오한 내면의 힘과 결합된 고전적인 아름다움의 본질을 포착합니다.'
  },
  'john smith': {
    original_name: 'John Smith',
    korean_name: '김진성 (金眞誠, Kim Jin-seong)',
    connection_explanation: '\'존\'은 히브리어 기원으로 \'하느님은 자비롭다\'라는 의미를 가지며, 신실함과 은혜를 상징합니다. 이는 \'진실함\'과 \'성실함\'을 의미하는 한국 이름 \'진성(眞誠)\'으로 연결됩니다. \'스미스\'는 원래 \'대장장이\'를 의미하는 직업 성씨로, 장인 정신과 금속 작업을 나타냅니다. 이는 \'금(金)\'의 의미를 가진 한국의 가장 흔한 성씨 중 하나인 \'김(金)\'과 자연스럽게 연결됩니다.',
    hanja_breakdown: [
      {
        character: '金',
        meaning: '금속, 금 - 스미스(대장장이)의 직업적 의미와 직접 연결되며, 한국에서 가장 흔한 성씨 중 하나입니다.'
      },
      {
        character: '眞',
        meaning: '진실, 진짜, 참됨 - 존 이름의 신실함과 진정성을 반영합니다.'
      },
      {
        character: '誠',
        meaning: '성실, 진심, 정직 - 존 이름의 덕성과 도덕적 품질을 보완합니다.'
      }
    ],
    poetic_interpretation: '\'김진성\'은 금속처럼 단단하고 변함없는 진실성과 성실함을 가진 사람을 묘사합니다. 이는 대장장이가 쇠를 정성껏 다루어 가치 있는 물건으로 변화시키듯, 진실된 마음으로 세상에 의미 있는 기여를 하는 사람의 모습을 떠올리게 합니다.'
  },
  'isabella rossellini': {
    original_name: 'Isabella Rossellini',
    korean_name: '박서연 (朴瑞燕, Park Seo-yeon)',
    connection_explanation: '\'이사벨라\'는 히브리어 \'엘리자베스\'의 변형으로 \'신께 헌신한\'이라는 의미를 가지며, 우아함과 고귀함을 상징합니다. 이는 \'상서로움\'과 \'아름다움\'을 의미하는 한국 이름 \'서연(瑞燕)\'으로 해석됩니다. \'로셀리니\'는 이탈리아 성으로 \'작은 빨간 것\'을 의미하며 예술적 열정을 연상시킵니다. 이는 견고함과 신뢰성을 상징하는 한국의 대표적 성씨 \'박(朴)\'과 연결됩니다.',
    hanja_breakdown: [
      {
        character: '朴',
        meaning: '소박함, 단순함, 진실함 - 자연스러운 우아함과 진정성을 나타내는 전통적인 한국 성씨입니다.'
      },
      {
        character: '瑞',
        meaning: '상서로움, 행운, 좋은 징조 - 이사벨라의 고귀한 특성과 축복받은 존재감을 반영합니다.'
      },
      {
        character: '燕',
        meaning: '제비, 우아함 - 로셀리니의 예술적 감각과 세련된 아름다움을 상징합니다.'
      }
    ],
    poetic_interpretation: '\'박서연\'은 소박하면서도 깊은 아름다움을 지닌 사람을 묘사합니다. 마치 우아하게 날아다니는 제비처럼 자유롭고 예술적인 영혼을 가졌으며, 그 존재만으로도 주변에 행운과 기쁨을 가져다주는 사람입니다. 이는 자연스러운 우아함과 진정성 있는 예술적 표현이 조화를 이루는 모습을 떠올리게 합니다.'
  }
};

// Default mock result for fallback
export const DEFAULT_MOCK_RESULT: KoreanNameResult = MOCK_RESULTS['sophia loren'];

// Function to get mock result
export function getMockResult(name: string): KoreanNameResult {
  const normalizedName = name.toLowerCase().trim();
  
  // Check if we have a specific mock for this name
  for (const [mockName, result] of Object.entries(MOCK_RESULTS)) {
    if (normalizedName.includes(mockName)) {
      return result;
    }
  }
  
  // If no specific mock found, return a default with the original name updated
  return {
    ...DEFAULT_MOCK_RESULT,
    original_name: name
  };
}
```

2. Update the API route to use mock data in development:
```typescript
import { NextRequest, NextResponse } from 'next/server';
import { generateKoreanName } from '@/lib/gemini';
import { getMockResult } from '@/lib/mock-data';

// Environment flag for using mock data
const USE_MOCK_DATA = process.env.NODE_ENV === 'development' && process.env.USE_REAL_API !== 'true';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name } = body;
    
    if (!name || typeof name !== 'string') {
      return NextResponse.json(
        { error: 'Name is required' },
        { status: 400 }
      );
    }
    
    // Use mock data in development unless explicitly told to use real API
    if (USE_MOCK_DATA) {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      const mockResult = getMockResult(name);
      return NextResponse.json(mockResult);
    }
    
    // Use real API
    const result = await generateKoreanName(name);
    return NextResponse.json(result);
  } catch (error) {
    console.error('Error in generate-name API route:', error);
    return NextResponse.json(
      { error: 'Failed to generate Korean name' },
      { status: 500 }
    );
  }
}
```

3. Create a .env.local file with configuration options:
```
GEMINI_API_KEY=your_api_key_here
# Set to 'true' to use real API in development
USE_REAL_API=false
```

4. Add a fallback mechanism in the generateKoreanName function:
```typescript
import { DEFAULT_MOCK_RESULT } from './mock-data';

export async function generateKoreanName(foreignName: string): Promise<KoreanNameResult> {
  try {
    // Existing implementation...
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    
    // In production, rethrow the error
    if (process.env.NODE_ENV === 'production') {
      throw new Error('Failed to generate Korean name');
    }
    
    // In development, return mock data as fallback
    console.warn('Using mock data as fallback due to API error');
    return {
      ...DEFAULT_MOCK_RESULT,
      original_name: foreignName
    };
  }
}
```

# Test Strategy:
1. Test the application with mock data enabled
2. Verify that mock data is used in development mode
3. Test switching between mock and real API using environment variables
4. Verify that the mock data provides a realistic representation of the API response
5. Test the fallback mechanism when API calls fail
6. Verify that the simulated network delay provides a realistic loading experience
7. Test with various input names to see how the mock system handles them
