# Task ID: 14
# Title: Implement Accessibility Features
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Enhance the application's accessibility by adding proper ARIA attributes, keyboard navigation, and focus management.
# Details:
1. Add a skip link for keyboard users in layout.tsx:
```tsx
<a 
  href="#main-content" 
  className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-primary focus:text-primary-foreground focus:rounded-md"
>
  Skip to main content
</a>
<main id="main-content" className="flex-1">
  {children}
</main>
```

2. Enhance the NameInputForm component with accessibility features:
```tsx
// Add aria-live region for status updates
<div aria-live="polite" className="sr-only">
  {isLoading ? 'Generating your Korean name, please wait.' : ''}
</div>

// Improve form accessibility
<form 
  onSubmit={handleSubmit} 
  className="space-y-4"
  aria-label="Name input form"
>
  <div>
    <label htmlFor="name-input" className="block text-sm font-medium mb-1">
      Your Name
    </label>
    <Input 
      id="name-input"
      placeholder="e.g. Isabella Rossellini" 
      value={name} 
      onChange={(e) => setName(e.target.value)}
      disabled={isLoading}
      required
      aria-required="true"
      aria-describedby="name-hint"
    />
    <p id="name-hint" className="text-sm text-muted-foreground mt-1">
      Enter your full name or first name only
    </p>
  </div>
  <Button 
    type="submit" 
    className="w-full" 
    disabled={isLoading || !name.trim()}
    aria-busy={isLoading}
  >
    {isLoading ? 'Generating...' : 'Generate Korean Name'}
  </Button>
</form>
```

3. Improve the ResultCard component accessibility:
```tsx
<Card className="w-full max-w-2xl mx-auto" ref={ref}>
  <CardHeader>
    <CardTitle className="text-center" tabIndex={0}>{result.korean_name}</CardTitle>
    <CardDescription className="text-center" tabIndex={0}>Korean name for {result.original_name}</CardDescription>
  </CardHeader>
  <CardContent className="space-y-6">
    <div>
      <h3 className="text-lg font-semibold mb-2" tabIndex={0}>Connection</h3>
      <p tabIndex={0}>{result.connection_explanation}</p>
    </div>
    
    <Separator aria-hidden="true" />
    
    <div>
      <h3 className="text-lg font-semibold mb-2" tabIndex={0}>Hanja Characters</h3>
      <div 
        className="grid grid-cols-1 md:grid-cols-3 gap-4"
        role="list"
        aria-label="Hanja character breakdown"
      >
        {result.hanja_breakdown.map((hanja, index) => (
          <div 
            key={index} 
            className="border rounded-lg p-4 text-center"
            role="listitem"
            tabIndex={0}
          >
            <div className="text-3xl mb-2" aria-label={`Hanja character: ${hanja.character}`}>
              {hanja.character}
            </div>
            <p className="text-sm">{hanja.meaning}</p>
          </div>
        ))}
      </div>
    </div>
    
    <Separator aria-hidden="true" />
    
    <div>
      <h3 className="text-lg font-semibold mb-2" tabIndex={0}>Poetic Interpretation</h3>
      <p className="italic" tabIndex={0}>{result.poetic_interpretation}</p>
    </div>
  </CardContent>
</Card>
```

4. Implement focus management when transitioning between views:
```tsx
// Add to imports
import { useRef, useEffect } from 'react';

// Inside the HomePage component
const nameInputRef = useRef<HTMLInputElement>(null);
const resultRef = useRef<HTMLDivElement>(null);

// Focus the input when the component mounts
useEffect(() => {
  if (!result && nameInputRef.current) {
    nameInputRef.current.focus();
  }
}, [result]);

// Focus the result when it's displayed
useEffect(() => {
  if (result && resultRef.current) {
    resultRef.current.focus();
  }
}, [result]);

// Update the NameInputForm to accept and use the ref
<NameInputForm 
  onSubmit={handleSubmit} 
  isLoading={isLoading} 
  inputRef={nameInputRef} 
/>

// Update the ResultCard to accept and use the ref
<ResultCard 
  result={result} 
  ref={resultCardRef} 
  focusRef={resultRef} 
/>
```

5. Add keyboard shortcuts for common actions:
```tsx
// Add to imports
import { useEffect } from 'react';

// Inside the HomePage component
useEffect(() => {
  const handleKeyDown = (e: KeyboardEvent) => {
    // Alt+N to focus the name input
    if (e.altKey && e.key === 'n' && !result) {
      e.preventDefault();
      nameInputRef.current?.focus();
    }
    
    // Alt+G to generate (if input has value)
    if (e.altKey && e.key === 'g' && !result && !isLoading) {
      e.preventDefault();
      const inputValue = nameInputRef.current?.value;
      if (inputValue) {
        handleSubmit(inputValue);
      }
    }
    
    // Alt+R to reset/try again
    if (e.altKey && e.key === 'r' && result) {
      e.preventDefault();
      handleReset();
    }
  };
  
  window.addEventListener('keydown', handleKeyDown);
  return () => window.removeEventListener('keydown', handleKeyDown);
}, [result, isLoading, handleSubmit, handleReset]);
```

6. Add a visually hidden accessibility info section:
```tsx
<div className="sr-only" aria-live="polite">
  <h2>Keyboard Shortcuts</h2>
  <ul>
    <li>Alt+N: Focus the name input</li>
    <li>Alt+G: Generate Korean name</li>
    <li>Alt+R: Try another name</li>
  </ul>
</div>
```

# Test Strategy:
1. Test keyboard navigation throughout the application
2. Verify screen reader compatibility using tools like NVDA or VoiceOver
3. Check focus management when transitioning between views
4. Test keyboard shortcuts functionality
5. Verify ARIA attributes are correctly implemented
6. Run accessibility audits using tools like Lighthouse or axe
7. Test with high contrast mode and zoom settings
8. Verify that all interactive elements have appropriate focus states
