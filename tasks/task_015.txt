# Task ID: 15
# Title: Prepare for Deployment
# Status: done
# Dependencies: 1, 2, 3, 4, 5, 6
# Priority: high
# Description: Prepare the application for production deployment, including environment configuration, build optimization, and deployment setup.
# Details:
1. Create environment configuration files:
   - .env.local (for local development)
   - .env.production (for production settings)
   - .env.example (as a template for other developers)

2. Example .env.example file:
```
# API Keys
GEMINI_API_KEY_FREE=your_api_key_here

# Feature Flags
USE_REAL_API=true
NEXT_PUBLIC_ENABLE_ANALYTICS=true
NEXT_PUBLIC_DISABLE_ERROR_LOGGING=false

# Deployment
NEXT_PUBLIC_SITE_URL=https://koreannamechanger.com
```

3. Create a next.config.js file with optimizations:
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  images: {
    domains: [],
    formats: ['image/avif', 'image/webp'],
  },
  // Enable compression
  compress: true,
  // Configure headers for security
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
        ],
      },
    ];
  },
  // Configure redirects if needed
  async redirects() {
    return [];
  },
  // Configure rewrites if needed
  async rewrites() {
    return [];
  },
};

module.exports = nextConfig;
```

4. Create a package.json scripts section for deployment:
```json
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
  "analyze": "ANALYZE=true next build",
  "postbuild": "next-sitemap"
}
```

5. Install additional deployment-related packages:
```bash
npm install --save-dev next-sitemap cross-env
```

6. Create a next-sitemap.config.js file:
```javascript
/** @type {import('next-sitemap').IConfig} */
module.exports = {
  siteUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://koreannamechanger.com',
  generateRobotsTxt: true,
  robotsTxtOptions: {
    additionalSitemaps: [
      `${process.env.NEXT_PUBLIC_SITE_URL || 'https://koreannamechanger.com'}/sitemap.xml`,
    ],
  },
};
```

7. Create a Vercel configuration file (vercel.json):
```json
{
  "version": 2,
  "buildCommand": "npm run build",
  "installCommand": "npm install",
  "framework": "nextjs",
  "regions": ["iad1"],
  "env": {
    "GEMINI_API_KEY_FREE": "@gemini-api-key"
  }
}
```

8. Create a README.md file with setup and deployment instructions:
```markdown
# Korean Name Changer

A web application that transforms foreign names into meaningful Korean names with poetic interpretations.

## Features

- Generate Korean names based on the meaning and essence of foreign names
- View detailed explanations of the name's connection to the original name
- See Hanja character breakdowns with meanings
- Read poetic interpretations of the generated names
- Save and view previously generated names within a session

## Tech Stack

- Next.js (App Router)
- Shadcn UI
- Tailwind CSS
- Google Gemini API

## Getting Started

### Prerequisites

- Node.js 18+ and npm
- Google Gemini API key

### Installation

1. Clone the repository
   ```bash
   git clone https://github.com/yourusername/korean-name-changer.git
   cd korean-name-changer
   ```

2. Install dependencies
   ```bash
   npm install
   ```

3. Create a `.env.local` file based on `.env.example`
   ```bash
   cp .env.example .env.local
   ```

4. Add your Google Gemini API key to `.env.local`

5. Start the development server
   ```bash
   npm run dev
   ```

6. Open [http://localhost:3000](http://localhost:3000) in your browser

## Deployment

### Vercel (Recommended)

1. Push your code to a GitHub repository

2. Import the project in Vercel

3. Add the required environment variables

4. Deploy

### Manual Deployment

1. Build the application
   ```bash
   npm run build
   ```

2. Start the production server
   ```bash
   npm start
   ```

## License

MIT
```

# Test Strategy:
1. Verify the application builds successfully with `npm run build`
2. Test the production build locally with `npm start`
3. Check environment variables are correctly loaded in different environments
4. Verify security headers are applied correctly
5. Test the sitemap generation process
6. Check for any build warnings or performance issues
7. Verify the application works with production API settings
8. Test deployment to Vercel or other hosting platforms
9. Verify the README instructions are accurate and complete
