# Task ID: 3
# Title: Implement Name Input UI Component
# Status: done
# Dependencies: 2
# Priority: high
# Description: Create a user-friendly input component that allows users to enter their foreign name, with clear instructions and a submission button.
# Details:
1. Create a NameInputForm component in the components directory:
```tsx
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

interface NameInputFormProps {
  onSubmit: (name: string) => void;
  isLoading: boolean;
}

export function NameInputForm({ onSubmit, isLoading }: NameInputFormProps) {
  const [name, setName] = useState('');
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (name.trim()) {
      onSubmit(name.trim());
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Enter Your Name</CardTitle>
        <CardDescription>
          Enter your foreign name to get a meaningful Korean name interpretation
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input 
            placeholder="e.g. Isabella Rossellini" 
            value={name} 
            onChange={(e) => setName(e.target.value)}
            disabled={isLoading}
            required
          />
          <Button 
            type="submit" 
            className="w-full" 
            disabled={isLoading || !name.trim()}
          >
            {isLoading ? 'Generating...' : 'Generate Korean Name'}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}
```
2. Implement form validation to ensure the name field is not empty
3. Add loading state handling for the form submission process
4. Style the component using Tailwind CSS and Shadcn UI components
5. Ensure the component is responsive and works well on mobile devices

# Test Strategy:
1. Test form submission with valid input
2. Verify form validation prevents empty submissions
3. Test loading state display during submission
4. Check responsive design on different screen sizes
5. Verify accessibility features (keyboard navigation, screen reader compatibility)
6. Test error handling for edge cases (very long names, special characters)
