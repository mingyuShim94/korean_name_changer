# Task ID: 6
# Title: Implement Main Page with Name Generation Flow
# Status: pending
# Dependencies: 3, 4, 5
# Priority: high
# Description: Create the main page that integrates the name input form and result display, managing the state and API calls for the name generation process.
# Details:
1. Create the main page component in app/page.tsx:
```tsx
'use client';

import { useState } from 'react';
import { NameInputForm } from '@/components/name-input-form';
import { ResultCard } from '@/components/result-card';
import { Button } from '@/components/ui/button';
import { KoreanNameResult } from '@/lib/gemini';
import { useToast } from '@/components/ui/use-toast';

export default function HomePage() {
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<KoreanNameResult | null>(null);
  const { toast } = useToast();

  const handleSubmit = async (name: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/generate-name', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate name');
      }

      const data = await response.json();
      setResult(data);
    } catch (error) {
      console.error('Error generating name:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to generate Korean name',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = () => {
    setResult(null);
  };

  return (
    <div className="container mx-auto py-10 px-4 max-w-4xl">
      <div className="text-center mb-10">
        <h1 className="text-3xl font-bold tracking-tight mb-2">Korean Name Changer</h1>
        <p className="text-muted-foreground">
          Discover your poetic Korean name based on the meaning and essence of your original name
        </p>
      </div>

      {!result ? (
        <NameInputForm onSubmit={handleSubmit} isLoading={isLoading} />
      ) : (
        <div className="space-y-6">
          <ResultCard result={result} />
          <div className="flex justify-center">
            <Button onClick={handleReset} variant="outline">
              Try Another Name
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
```
2. Implement loading states and error handling
3. Add toast notifications for success and error states
4. Create a smooth transition between input and result views
5. Implement the "Try Another Name" functionality to reset the form

# Test Strategy:
1. Test the complete flow from name input to result display
2. Verify loading states are displayed correctly during API calls
3. Test error handling with simulated API failures
4. Check the reset functionality works correctly
5. Verify the UI updates appropriately based on application state
6. Test with various input scenarios (valid names, empty input, etc.)
7. Verify toast notifications appear correctly for errors
