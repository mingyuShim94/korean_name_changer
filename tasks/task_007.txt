# Task ID: 7
# Title: Implement Session History Feature
# Status: deferred
# Dependencies: 6
# Priority: medium
# Description: Create a feature to store and display previously generated names within the current session using browser session storage.
# Details:
1. Create a custom hook for managing session history in hooks/useNameHistory.ts:
```typescript
import { useState, useEffect } from 'react';
import { KoreanNameResult } from '@/lib/gemini';

export function useNameHistory() {
  const [history, setHistory] = useState<KoreanNameResult[]>([]);

  // Load history from session storage on initial render
  useEffect(() => {
    try {
      const savedHistory = sessionStorage.getItem('nameHistory');
      if (savedHistory) {
        setHistory(JSON.parse(savedHistory));
      }
    } catch (error) {
      console.error('Error loading history from session storage:', error);
    }
  }, []);

  // Save history to session storage whenever it changes
  useEffect(() => {
    try {
      sessionStorage.setItem('nameHistory', JSON.stringify(history));
    } catch (error) {
      console.error('Error saving history to session storage:', error);
    }
  }, [history]);

  const addToHistory = (result: KoreanNameResult) => {
    // Add to history only if it doesn't already exist
    setHistory(prev => {
      const exists = prev.some(item => 
        item.original_name === result.original_name && 
        item.korean_name === result.korean_name
      );
      
      if (exists) return prev;
      return [result, ...prev];
    });
  };

  const clearHistory = () => {
    setHistory([]);
    sessionStorage.removeItem('nameHistory');
  };

  return { history, addToHistory, clearHistory };
}
```
2. Create a HistoryList component in components/history-list.tsx:
```tsx
import { KoreanNameResult } from '@/lib/gemini';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

interface HistoryListProps {
  history: KoreanNameResult[];
  onSelect: (result: KoreanNameResult) => void;
  onClear: () => void;
}

export function HistoryList({ history, onSelect, onClear }: HistoryListProps) {
  if (history.length === 0) {
    return null;
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-xl">Previous Names</CardTitle>
        <Button variant="ghost" size="sm" onClick={onClear}>
          Clear All
        </Button>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[250px] pr-4">
          <div className="space-y-2">
            {history.map((item, index) => (
              <div 
                key={index} 
                className="p-3 border rounded-md cursor-pointer hover:bg-accent transition-colors"
                onClick={() => onSelect(item)}
              >
                <div className="font-medium">{item.korean_name}</div>
                <div className="text-sm text-muted-foreground">{item.original_name}</div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
```
3. Update the main page to include history functionality:
```tsx
// Add to imports
import { useNameHistory } from '@/hooks/useNameHistory';
import { HistoryList } from '@/components/history-list';

// Inside the HomePage component
const { history, addToHistory, clearHistory } = useNameHistory();

// Update handleSubmit to add results to history
const handleSubmit = async (name: string) => {
  // ... existing code ...
  
  const data = await response.json();
  setResult(data);
  addToHistory(data); // Add this line
  
  // ... existing code ...
};

// Add to the JSX, after the main content
{!result && history.length > 0 && (
  <div className="mt-10">
    <HistoryList 
      history={history} 
      onSelect={setResult} 
      onClear={clearHistory} 
    />
  </div>
)}
```

# Test Strategy:
1. Test adding new results to history
2. Verify history persists across page refreshes within the same session
3. Test selecting items from history displays the correct result
4. Verify the clear history functionality works correctly
5. Test edge cases like session storage limits
6. Check that duplicate entries are not added to history
7. Verify the history list is only shown when appropriate (when there's no current result)
